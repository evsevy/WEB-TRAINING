// ЦИКЛЫ
// WHILE

// бесконечный цикл while
while(true){
    // тело цикла
}

// инициализируем переменные i и n
let i = 1, n = 5;

// цикл будет идти, пока i <= 5
// на каждой итерации i увеличивается на 1
while (i <= n) {
    console.log(i);
    i += 1;
}

// считываем числа с клавиатуры и складываем их
// если пользователь введет отрицательное число, цикл остановится
// введенное отрицательное число не добавляется к сумме

let sum = 0;

// считываем ввод с клавиатуры
let number = parseInt(prompt("Введите число: "));

while(number >= 0) {

    // складываем все положительные числа
    sum += number;

    // число было положительным — просим ввести новое число
    number = parseInt(prompt("Введите число: "));
}

// выводим на экран сумму
console.log(`Сумма введенных положительных чисел — ${sum}.`);

// DO WHILE
let i = 1;
const n = 5;

do {
    console.log(i);
    i++;
} while(i <= n);

// FOR
// в этом цикле — 5 итераций
for (let i = 1; i <=5; ++i) {
   // тело цикла
}

//РЕКУРСИЯ
function recurse() {
    // код функции
    recurse(); // функция вызывает сама себя
    // код функции 
}

recurse();

// МАССИВЫ

const words = ['привет', 'мир', 'Андрей'];
Внутри массива можно также хранить массивы, функции и другие объекты. Например, вот так:

const newData = [
    {'задание1': 'спорт'},
    [1, 2 ,3],
    function hello() { console.log('привет')}
];

Получить элемент массива можно обратившись к нему по индексу.

const myArray = ['п', 'р', 'и', 'в', 'е', 'т'];

// первый элемент
console.log(myArray[0]);  // Вывод: "п"

// второй элемент
console.log(myArray[1]); // Вывод: "р"

Метод push() добавляет элемент в конец массива.

let dailyActivities = ['есть', 'спать'];

// добавляем элемент в конец массива
dailyActivities.push('спорт');

console.log(dailyActivities); // Вывод: ['есть', 'спать', 'спорт']
• Метод unshift() добавляет элемент в начало массива.

let dailyActivities = ['есть', 'спать'];

// добавляем элемент в начало массива
dailyActivities.unshift('работать'); 

console.log(dailyActivities); // Вывод: ['работать', 'есть', 'спать']

Изменять элементы массива можно обращаясь к ним по индексу.

let dailyActivities = [ 'есть', 'спать'];

// добавляем новый элемент 'спорт' на позицию с индексом 2
dailyActivities[2] = 'спорт';

console.log(dailyActivities); // Вывод: ['есть', 'спать', 'спорт']

Метод pop() удаляет последний элемент из массива и возвращает значение этого элемента.

let dailyActivities = ['работать', 'есть', 'спать', 'спорт'];

// удаляем последний элемент
dailyActivities.pop();
console.log(dailyActivities); // Вывод: ['работать', 'есть', 'спать']

// удаляем последний элемент 'спать' и записываем его в переменную
let removedElement = dailyActivities.pop();

// выводим удаленный элемент
console.log(removedElement); // Вывод: 'спать'
console.log(dailyActivities);  // Вывод: ['работать', 'есть']

GET/Set
const student = {

    // свойство-данные
    firstName: 'Маша',
    
    // свойство-аксессор (геттер)
    get getName() {
        return this.firstName;
    }
};

// доступ к свойству-данным
console.log(student.firstName); // Вывод: Маша

// доступ к свойству-аксессору
console.log(student.getName); // Вывод: Маша

// если попытаемся вызвать геттер как метод — получим ошибку
console.log(student.getName()); // здесь будет ошибка

const student = {
    firstName: 'Маша',
    
    // свойство-аксессор (сеттер)
    set changeName(newName) {
        this.firstName = newName;
    }
};

console.log(student.firstName); // Вывод: Маша

// изменяем свойство объекта с помощью сеттера
student.changeName = 'Настя';

console.log(student.firstName); // Вывод: Настя

Для создания Map нужно использовать конструктор new Map(). Например:

// создание Map
const map1 = new Map(); // пустой map
console.log(map1); // Вывод: Map {}
Вставка элемента в Map
После создания Map в него можно добавлять объекты — с помощью метода set().

// создаем ОБЪЕКТ MAP
let map1 = new Map();

// вставляет пару ключ/значение
map1.set('инфо', {name: 'Андрей', age: 26});
console.log(map1); // Map {"инфо" => {name: "Андрей", age: 26}}
В качестве ключей также можно использовать объекты или функции. Например:

// Map с объектом в качестве ключа
let map2 = new Map();

let obj = {};
map2.set(obj, {name: 'Андрей, age: "26"});

console.log(map2); // Вывод: Map {{} => {name: "Jack", age: "26"}}


// создаем ОБЪЕКТ SET
Для создания множества используется конструктор new Set(). Например: 

// создаем множество
const set1 = new Set(); // пустое множество
console.log(set1); // Вывод: Set {}

// множество с разными типами данных
const set2 = new Set([1, 'привет', {count : true}]);
console.log(set2); // Вывод: Set {1, "привет", {count: true}}
Создать Set с повторяющимися значениями, не получится. Все дубликаты будут исключены.

// множество с повторяющимися значениями
const set3 = new Set([1, 1, 2, 2]);
console.log(set3); // Вывод: Set {1, 2}