// ОБЪЕКТЫ

let user = new Object(); // синтаксис "конструктор объекта"
let user = {}; // синтаксис "литерал объекта"


let user = { // объект
    name: "EVGENY", // под ключом "name" хранится значение "John"
    age: 43 // под ключом "age" хранится значение 30
};
// Для обращения к свойствам используется запись« через точку»:

// получаем свойства объекта:
alert(user.name);
alert(user.age);

// Обьект может содержать переменные:
const MY_NAME = 'Evgeny';
const age = 43;

const UserProfile = {
    name: MY_NAME,
    age: age // (age,)
}
alert(UserProfile)

// Глобальный обьект

window // global (globalThis) - node.js

// В объект можно вкладывать функции (методы, значения которых - функции):

const myCity = {
    city: 'MINSK',
    cityMaverless() {
        console.log('Maverless!')
    } // или: cityMaverless: function ()
}
myCity.cityMaverless();
/* 
Объекты – это ассоциативные массивы с рядом дополнительных возможностей.

Они хранят свойства (пары ключ-значение), где:

Ключи свойств должны быть строками или символами (обычно строками).
Значения могут быть любого типа.
Чтобы получить доступ к свойству, мы можем использовать:

Запись через точку: obj.property.
Квадратные скобки obj["property"]. Квадратные скобки позволяют взять ключ из переменной, например, obj[varWithKey].
Дополнительные операторы:

Удаление свойства: delete obj.prop.
Проверка существования свойства: "key" in obj.
Перебор свойств объекта: цикл for for (let key in obj).
То, что мы изучали в этой главе, называется «простым объектом» («plain object») или просто Object.

В JavaScript есть много других типов объектов:

Array для хранения упорядоченных коллекций данных,
Date для хранения информации о дате и времени,
Error для хранения информации об ошибке.
… и так далее.
У них есть свои особенности, которые мы изучим позже. 
Иногда люди говорят что-то вроде «тип данных Array» или «тип данных Date»,
 но формально они не являются отдельными типами, а относятся к типу данных Object.
  Они лишь расширяют его различными способами.
  */